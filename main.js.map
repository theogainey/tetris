{
  "version": 3,
  "sources": ["src/constants.ts", "src/update.ts", "src/render.ts", "src/eventListeners.ts", "src/index.ts"],
  "sourcesContent": ["export const tetrominoSize = 30;\nexport const gravity = 48; // frames it takes to fall 1 line;\n\nexport const tetrominos: Record<TetrominoTypes, TetrominoTypeDetails> = {\n  I: {\n    color: '#6EECEE',\n    offsets: [[0,0], [tetrominoSize, 0],  [tetrominoSize * 2, 0],  [tetrominoSize * 3, 0]],\n    rightExtreme: tetrominoSize * 4,\n    downExtreme: tetrominoSize,\n    vertices: [[0,0], [0, tetrominoSize], [tetrominoSize * 4, tetrominoSize],  [tetrominoSize * 4, 0]]\n  },\n  J: {\n    color: '#0000E6',\n    offsets: [[0,0], [0, tetrominoSize],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n    downExtreme: tetrominoSize * 2,\n    vertices: [[0,0], [0, tetrominoSize * 2], [tetrominoSize * 3, tetrominoSize * 2], [tetrominoSize * 3, tetrominoSize], [tetrominoSize, tetrominoSize], [0, tetrominoSize]],\n  },\n  L: {\n    color: '#E4A439',\n    offsets: [[tetrominoSize * 2,0], [0, tetrominoSize],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n    downExtreme: tetrominoSize * 2,\n    vertices: [[tetrominoSize * 2, 0], [tetrominoSize * 3, 0], [tetrominoSize * 3, tetrominoSize * 2], [0, tetrominoSize * 2], [0, tetrominoSize], [tetrominoSize * 2, tetrominoSize]],\n  },\n  O: {\n    color: '#E3E34B',\n    offsets: [[0,0], [0, tetrominoSize],  [tetrominoSize, 0],  [tetrominoSize, tetrominoSize]],\n    rightExtreme: tetrominoSize * 2,\n    downExtreme: tetrominoSize * 2,\n    vertices: [[0, 0], [0, tetrominoSize * 2], [tetrominoSize * 2, tetrominoSize * 2], [tetrominoSize * 2, 0],],\n  },\n  S: {\n    color: '#6EEC47',\n    offsets: [[tetrominoSize * 2, 0], [tetrominoSize, 0],  [tetrominoSize, tetrominoSize],  [0, tetrominoSize]],\n    rightExtreme: tetrominoSize * 2,\n    downExtreme: tetrominoSize * 2,\n    vertices: [[0, tetrominoSize], [0, tetrominoSize * 2], [tetrominoSize * 2, tetrominoSize * 2], [tetrominoSize * 2, tetrominoSize],[tetrominoSize * 3, tetrominoSize], [tetrominoSize * 3, 0],  [tetrominoSize, 0],   [tetrominoSize, tetrominoSize]],\n  },\n  T: {\n    color: '#921CE7',\n    offsets: [[tetrominoSize, 0], [tetrominoSize, tetrominoSize],  [0, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n    downExtreme: tetrominoSize * 2,\n    vertices: [[tetrominoSize, 0], [tetrominoSize, tetrominoSize], [0, tetrominoSize], [0, tetrominoSize  * 2],[tetrominoSize * 3, tetrominoSize * 2], [tetrominoSize * 3, tetrominoSize],  [tetrominoSize * 2, tetrominoSize],   [tetrominoSize * 2, 0]],\n  },\n  Z: {\n    color: '#DC2F21',\n    offsets: [[0, 0], [tetrominoSize, 0],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n    downExtreme: tetrominoSize * 2,\n    vertices: [[0, 0], [0, tetrominoSize], [tetrominoSize, tetrominoSize], [tetrominoSize, tetrominoSize  * 2],[tetrominoSize * 3, tetrominoSize * 2], [tetrominoSize * 3, tetrominoSize],  [tetrominoSize * 2, tetrominoSize],   [tetrominoSize * 2, 0]],\n  },\n}\n\nexport const canvas = document.getElementById(\"myCanvas\") as HTMLCanvasElement;\n\n\n// gameState\nexport const gameState: GameState = {\n  xCurrent: 0,\n  yCurrent: 0, \n  typeCurrent: 'Z',\n  dy: tetrominoSize/gravity,\n  lockedTetrominos: [],\n  lockedCells: [],\n  collisionPath: new Map(),\n};\n", "import { tetrominos, tetrominoSize, gameState, canvas } from \"./constants\";\n\n// if y value is small than smallest y at x point in collision point then no collision is possible even with a jagged path\n// returns true if no collision\nfunction minCollisionCheck(y: number, yCollisionPoints: number[]) {\n  const minY = Math.min(...yCollisionPoints)\n  return y < minY;\n}\n\nfunction noVerticalCollisionCheck() {\n  const {offsets} = tetrominos[gameState.typeCurrent]; \n  const potentialCollisionPoints = offsets.map(([xOffset, yOffset]) => ({\n    y: yOffset + tetrominoSize + gameState.yCurrent,\n    xStart: xOffset + gameState.xCurrent,\n    xEnd: xOffset + tetrominoSize + gameState.xCurrent,\n  }));\n  return potentialCollisionPoints.every(({xStart, xEnd, y}) => {\n    // right now this assumes no jagged stacks. Fix this next\n    const xStartCollisionPoints =  gameState.collisionPath.get(xStart) ?? [tetrominoSize * 20];    \n    const xEndCollisionPoints =  gameState.collisionPath.get(xEnd) ?? [tetrominoSize * 20];    \n    const matchingLedges = xStartCollisionPoints.filter((x) => xEndCollisionPoints.includes(x));\n    return minCollisionCheck(y, matchingLedges) // || jagged check\n  })\n};\n\nexport default function update():void{    \n  if(noVerticalCollisionCheck()) {    \n    gameState.yCurrent = gameState.yCurrent + gameState.dy; \n    return;\n  };\n\n  // if hitting floor add to cells\n  tetrominos[gameState.typeCurrent].offsets.forEach(([xOffset, yOffset]) => {\n    gameState.lockedCells.push({\n      color: tetrominos[gameState.typeCurrent].color,\n      xStart: gameState.xCurrent + xOffset,\n      yStart: gameState.yCurrent + yOffset,\n    });\n  });\n  \n  // //add to collisionPath \n  tetrominos[gameState.typeCurrent].vertices.forEach(([x, y]) => {\n    const yPoints = gameState.collisionPath.get(x + gameState.xCurrent);\n    yPoints \n    ? gameState.collisionPath.set(x + gameState.xCurrent, yPoints.concat(y + gameState.yCurrent))\n    : gameState.collisionPath.set(x + gameState.xCurrent, [y + gameState.yCurrent])\n  })\n\n  // start new block \n  gameState.xCurrent = 0;\n  gameState.yCurrent = 0;\n};\n", "import { tetrominos, tetrominoSize, gameState, canvas } from \"./constants\";\n\nfunction drawCell(ctx: CanvasRenderingContext2D, color: string, xStart:number, yStart: number) {\n    ctx.beginPath();\n    ctx.rect(xStart, yStart, tetrominoSize, tetrominoSize);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath(); \n}\n\nfunction drawTetromino(ctx: CanvasRenderingContext2D, type: TetrominoTypeDetails, x:number, y: number) {\n  type.offsets.forEach(([xOffset, yOffset])=>{\n    drawCell(ctx, type.color, x + xOffset, y + yOffset)\n  })\n}\n\n\nexport default function render() {\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawTetromino(ctx, tetrominos[gameState.typeCurrent], gameState.xCurrent, gameState.yCurrent);\n  \n  gameState.lockedCells.forEach(({color, xStart, yStart})=> {\n    drawCell(ctx, color, xStart, yStart);\n  });\n};\n", "import { tetrominoSize, gameState, tetrominos } from \"./constants\";\n\n\nfunction wallCheck(key: string ):boolean{\n  switch (key) {\n    case 'ArrowRight':\n      return (gameState.xCurrent + tetrominos[gameState.typeCurrent].rightExtreme < tetrominoSize * 10)\n    case 'ArrowLeft' :\n      return (gameState.xCurrent - tetrominoSize >= 0)\n    default:\n      return false;\n  }\n};\n\nfunction horizontalMove(key: string):void {\n  switch (key) {\n    case 'ArrowRight':\n      gameState.xCurrent = gameState.xCurrent + tetrominoSize;\n      break;\n    case 'ArrowLeft' :\n      gameState.xCurrent = gameState.xCurrent - tetrominoSize\n      break;\n    default:\n      gameState.xCurrent = gameState.xCurrent - tetrominoSize; \n      break;\n  }\n\n}\nexport default function eventListeners() {\n  window.addEventListener(\"keydown\", (event) => {\n    if(wallCheck(event.key)){\n      horizontalMove(event.key);\n    }\n  });\n};\n", "import update from './update';\nimport render from './render';\nimport eventListeners from './eventListeners';\n\nfunction main() {\n  window.requestAnimationFrame(main);\n  update();\n  render();\n}\n\neventListeners();\nmain();\nexport {};"],
  "mappings": "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",
  "names": ["tetrominos", "canvas", "gameState", "minCollisionCheck", "y", "yCollisionPoints", "minY", "noVerticalCollisionCheck", "offsets", "tetrominos", "gameState", "xOffset", "yOffset", "xStart", "xEnd", "_a", "_b", "xStartCollisionPoints", "xEndCollisionPoints", "matchingLedges", "x", "update", "yPoints", "drawCell", "ctx", "color", "xStart", "yStart", "drawTetromino", "type", "x", "y", "xOffset", "yOffset", "render", "canvas", "tetrominos", "gameState", "wallCheck", "key", "gameState", "tetrominos", "horizontalMove", "eventListeners", "event", "main", "update", "render", "eventListeners"]
}
