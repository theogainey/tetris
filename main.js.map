{
  "version": 3,
  "sources": ["src/constants.ts", "src/update.ts", "src/render.ts", "src/eventListeners.ts", "src/index.ts"],
  "sourcesContent": ["export const tetrominoSize = 30;\nexport const gravity = 48; // frames it takes to fall 1 line;\n\nexport const tetrominos: Record<TetrominoTypes, TetrominoTypeDetails> = {\n  I: {\n    color: '#6EECEE',\n    offsets: [[0,0], [tetrominoSize, 0],  [tetrominoSize * 2, 0],  [tetrominoSize * 3, 0]],\n    rightExtreme: tetrominoSize * 4,\n  },\n  J: {\n    color: '#0000E6',\n    offsets: [[0,0], [0, tetrominoSize],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n  },\n  L: {\n    color: '#E4A439',\n    offsets: [[tetrominoSize * 2,0], [0, tetrominoSize],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n  },\n  O: {\n    color: '#E3E34B',\n    offsets: [[0,0], [0, tetrominoSize],  [tetrominoSize, 0],  [tetrominoSize, tetrominoSize]],\n    rightExtreme: tetrominoSize * 2,\n  },\n  S: {\n    color: '#6EEC47',\n    offsets: [[tetrominoSize * 2, 0], [tetrominoSize, 0],  [tetrominoSize, tetrominoSize],  [0, tetrominoSize]],\n    rightExtreme: tetrominoSize * 2,\n  },\n  T: {\n    color: '#921CE7',\n    offsets: [[tetrominoSize, 0], [tetrominoSize, tetrominoSize],  [0, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n  },\n  Z: {\n    color: '#DC2F21',\n    offsets: [[0, 0], [tetrominoSize, 0],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]],\n    rightExtreme: tetrominoSize * 3,\n  },\n}\n\nexport const canvas = document.getElementById(\"myCanvas\") as HTMLCanvasElement;\n\n// gameState\nexport const gameState: GameState = {\n  xCurrent: 0,\n  yCurrent: 0, \n  typeCurrent: 'Z',\n  dy: tetrominoSize/gravity,\n  lockedTetrominos: [],\n};\n", "import { tetrominos, tetrominoSize, gameState, canvas } from \"./constants\";\n\nfunction floorCheck({typeCurrent, yCurrent, dy}: GameState, { height }:HTMLCanvasElement){\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[0][1] > height - tetrominoSize) return true;\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[1][1] > height - tetrominoSize) return true;\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[2][1] > height - tetrominoSize) return true;\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[3][1] > height - tetrominoSize) return true;\n  return false;\n};\n\nexport default function update():void{    \n  if(!floorCheck(gameState, canvas)) {\n    gameState.yCurrent = gameState.yCurrent + gameState.dy; \n    return;\n  }\n  // if hitting floor add to lockedTetrominos\n  gameState.lockedTetrominos.push({\n    type: gameState.typeCurrent,\n    xStart: gameState.xCurrent,\n    yStart: gameState.yCurrent,\n  });\n\n  // start new block \n  gameState.xCurrent = 0;\n  gameState.yCurrent = 0;\n};\n", "import { tetrominos, tetrominoSize, gameState, canvas } from \"./constants\";\nconst tetrominoInset = 3;\n\nfunction drawTetromino(ctx: CanvasRenderingContext2D, type: TetrominoTypeDetails, x:number, y: number) {\n  type.offsets.forEach(([xOffset, yOffset])=>{\n    ctx.beginPath();\n    ctx.rect(x + xOffset, y + yOffset, tetrominoSize, tetrominoSize);\n    ctx.fillStyle = type.color;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath(); \n  })\n}\n\n\nexport default function render() {\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  // draw each tetromino \n  drawTetromino(ctx, tetrominos[gameState.typeCurrent], gameState.xCurrent, gameState.yCurrent);\n  gameState.lockedTetrominos.forEach(({type, xStart, yStart})=> {\n    drawTetromino(ctx, tetrominos[type], xStart, yStart);\n  });\n};\n", "import { tetrominoSize, gameState, tetrominos, canvas } from \"./constants\";\n\n\nfunction wallCheck(key: string ):boolean{\n  switch (key) {\n    case 'ArrowRight':\n      return (gameState.xCurrent + tetrominos[gameState.typeCurrent].rightExtreme < canvas.width)\n    case 'ArrowLeft' :\n      return (gameState.xCurrent - tetrominoSize >= 0)\n    default:\n      return false;\n  }\n};\n\nfunction horizontalMove(key: string):void {\n  switch (key) {\n    case 'ArrowRight':\n      gameState.xCurrent = gameState.xCurrent + tetrominoSize;\n      break;\n    case 'ArrowLeft' :\n      gameState.xCurrent = gameState.xCurrent - tetrominoSize\n      break;\n    default:\n      gameState.xCurrent = gameState.xCurrent - tetrominoSize; \n      break;\n  }\n\n}\nexport default function eventListeners() {\n  window.addEventListener(\"keydown\", (event) => {\n    if(wallCheck(event.key)){\n      horizontalMove(event.key);\n    }\n  });\n};\n", "import update from './update';\nimport render from './render';\nimport eventListeners from './eventListeners';\n\nfunction main() {\n  window.requestAnimationFrame(main);\n  update();\n  render();\n}\n\neventListeners();\nmain();\nexport {};"],
  "mappings": "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",
  "names": ["tetrominos", "canvas", "gameState", "floorCheck", "typeCurrent", "yCurrent", "dy", "height", "tetrominos", "update", "gameState", "canvas", "drawTetromino", "ctx", "type", "x", "y", "xOffset", "yOffset", "render", "canvas", "tetrominos", "gameState", "xStart", "yStart", "wallCheck", "key", "gameState", "tetrominos", "canvas", "horizontalMove", "eventListeners", "event", "main", "update", "render", "eventListeners"]
}
