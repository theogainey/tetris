{
  "version": 3,
  "sources": ["src/constants.ts", "src/update.ts", "src/render.ts", "src/eventListeners.ts", "src/index.ts"],
  "sourcesContent": ["export const tetrominoSize = 30;\nexport const gravity = 48; // frames it takes to fall 1 line;\n\nexport const tetrominos: Record<TetrominoTypes, TetrominoTypeDetails> = {\n  I: {\n    color: '#6EECEE',\n    offsets: [[0,0], [tetrominoSize, 0],  [tetrominoSize * 2, 0],  [tetrominoSize * 3, 0]],\n  },\n  J: {\n    color: '#0000E6',\n    offsets: [[0,0], [0, tetrominoSize],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]]\n  },\n  L: {\n    color: '#E4A439',\n    offsets: [[tetrominoSize * 2,0], [0, tetrominoSize],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]]\n  },\n  O: {\n    color: '#E3E34B',\n    offsets: [[0,0], [0, tetrominoSize],  [tetrominoSize, 0],  [tetrominoSize, tetrominoSize]]\n  },\n  S: {\n    color: '#6EEC47',\n    offsets: [[tetrominoSize * 2, 0], [tetrominoSize, 0],  [tetrominoSize, tetrominoSize],  [0, tetrominoSize]]\n  },\n  T: {\n    color: '#921CE7',\n    offsets: [[tetrominoSize, 0], [tetrominoSize, tetrominoSize],  [0, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]]\n  },\n  Z: {\n    color: '#DC2F21',\n    offsets: [[0, 0], [tetrominoSize, 0],  [tetrominoSize, tetrominoSize],  [tetrominoSize * 2, tetrominoSize]]\n  },\n}\n\nexport const canvas = document.getElementById(\"myCanvas\") as HTMLCanvasElement;\n\n// gameState\nexport const gameState: GameState = {\n  xCurrent: 0,\n  yCurrent: 0, \n  typeCurrent: 'I',\n  dy: tetrominoSize/gravity,\n  lockedTetrominos: [],\n};\n", "import { tetrominos, tetrominoSize, gameState, canvas } from \"./constants\";\n\nfunction floorCheck({typeCurrent, yCurrent, dy}: GameState, { height }:HTMLCanvasElement){\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[0][1] > height - tetrominoSize) return true;\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[1][1] > height - tetrominoSize) return true;\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[2][1] > height - tetrominoSize) return true;\n  if(yCurrent + dy + tetrominos[typeCurrent].offsets[3][1] > height - tetrominoSize) return true;\n  return false;\n};\n\n\nexport default function update():void{    \n  // if hitting nothing no update\n  // check if hitting floor \n  // check each y offset point  to see if \n  if(!floorCheck(gameState, canvas)) {\n    gameState.yCurrent = gameState.yCurrent + gameState.dy; \n    return;\n  }\n  // if hitting floor add to lockedTetrominos\n  gameState.lockedTetrominos.push({\n    type: gameState.typeCurrent,\n    xStart: gameState.xCurrent,\n    yStart: gameState.yCurrent,\n  });\n\n  // start new block \n  gameState.xCurrent = 0;\n  gameState.yCurrent = 0;\n};\n", "import { tetrominos, tetrominoSize, gameState, canvas } from \"./constants\";\nconst tetrominoInset = 3;\nconst tetrominoInnerSize = tetrominoSize - (tetrominoInset * 2);\n\nfunction drawTetromino(ctx: CanvasRenderingContext2D, type: TetrominoTypeDetails, x:number, y: number) {\n  type.offsets.forEach(([xOffset, yOffset])=>{\n    ctx.beginPath();\n    ctx.rect(x + xOffset, y + yOffset, tetrominoSize, tetrominoSize);\n    ctx.fillStyle = type.color;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath(); \n    // draw inner rect same color but with shadow\n    ctx.beginPath();\n    ctx.rect(x + xOffset + tetrominoInset, y + yOffset + tetrominoInset, tetrominoInnerSize, tetrominoInnerSize);\n    ctx.fillStyle = type.color;\n    ctx.shadowColor = \"red\";\n    ctx.shadowBlur = 1;\n    ctx.fill();\n    ctx.closePath(); \n  })\n}\n\n\nexport default function render() {\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  // draw each tetromino \n  drawTetromino(ctx, tetrominos[gameState.typeCurrent], gameState.xCurrent, gameState.yCurrent);\n  gameState.lockedTetrominos.forEach(({type, xStart, yStart})=> {\n    drawTetromino(ctx, tetrominos[type], xStart, yStart);\n  });\n};\n", "import { tetrominoSize, gameState, canvas } from \"./constants\";\n\nexport default function eventListeners() {\n  window.addEventListener(\"keydown\", (event) => {\n    if(event.key === 'ArrowRight'){\n      if(gameState.xCurrent + tetrominoSize < canvas.width) gameState.xCurrent = gameState.xCurrent + tetrominoSize; \n    }\n    if(event.key === 'ArrowLeft'){\n      if(gameState.xCurrent - tetrominoSize >= 0) gameState.xCurrent = gameState.xCurrent - tetrominoSize; \n    }\n  });\n};\n", "import update from './update';\nimport render from './render';\nimport eventListeners from './eventListeners';\n\nfunction main() {\n  window.requestAnimationFrame(main);\n  update();\n  render();\n}\n\neventListeners();\nmain();\nexport {};"],
  "mappings": "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",
  "names": ["tetrominos", "canvas", "gameState", "floorCheck", "typeCurrent", "yCurrent", "dy", "height", "tetrominos", "update", "gameState", "canvas", "tetrominoInset", "tetrominoInnerSize", "drawTetromino", "ctx", "type", "x", "y", "xOffset", "yOffset", "render", "canvas", "tetrominos", "gameState", "xStart", "yStart", "eventListeners", "event", "gameState", "canvas", "main", "update", "render", "eventListeners"]
}
